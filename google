const WEBHOOK_URL         = "https://discord.com/api/webhooks/1171923117254381718/90C7Xmv-Xm8Hn26ulODOHRoOLrCcM6Q3XOyYuhdDvmXKWSNoNSamgzBJ9qJefSRbF2Ol";
const COLOR               = 0x808080; // –°–µ—Ä–∞—è –±–æ–∫–æ–≤–∞—è –ª–∏–Ω–∏—è
const TITLE               = "–ù–æ–≤–∞—è –ó–∞—è–≤–∫–∞ –≤ –æ—Ç–¥–µ–ª ATDüéì";
const URL                 = "";
const DESCRIPTION         = "";
const THUMBNAIL_URL       = "";
const FOOTER_GIF_URL      = "https://i.gifer.com/MU2S.gif";

// –ê–≤—Ç–æ—Ä—Å–∫–∏–π –±–ª–æ–∫
const AUTHOR_NAME         = "";
const AUTHOR_URL          = "";
const AUTHOR_ICON_URL     = "";

// –ü–æ–¥–ø–∏—Å—å
const FOOTER_TEXT         = "";
const FOOTER_ICON_URL     = "";
const INCLUDE_TIMESTAMP   = false;

function onSubmit(e) {
  const responses = e.response.getItemResponses();
  const fields = [];

  responses.forEach((resp) => {
    const question = resp.getItem().getTitle();
    const answer   = resp.getResponse();
    if (!answer) return;

    const parts = answer.match(/[\s\S]{1,1024}/g) || [];
    parts.forEach((part, idx) => {
      fields.push({
        name:   idx === 0 ? question : `${question} (cont.)`,
        value:  part,
        inline: false
      });
    });
  });

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ 3-–º—É –æ—Ç–≤–µ—Ç—É
  const thirdAnswer = responses[2]?.getResponse() || "";
  let dynamicMention = "";

  switch (thirdAnswer) {
    case "Central Specialization Division (C.S.D.)":
      dynamicMention = "<@&734479728987209799> <@&734480892302721074>";
      break;
    case "Special Response Team (S.R.T.)":
      dynamicMention = "<@&866064852395884604> <@&878016775827124294>";
      break;
    default:
      dynamicMention = "";
  }

  // –°—Ç–∞—Ç–∏—á–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
  const staticMention = "<@&959448297825792071> <@&959919668053835786>";
  const fullMention = `${staticMention} ${dynamicMention}`.trim();

  const timestamp = INCLUDE_TIMESTAMP ? new Date().toISOString() : "";

  const payload = {
    content: fullMention,
    embeds: [{
      title:       TITLE,
      url:         URL,
      description: DESCRIPTION,
      color:       COLOR,
      fields:      fields,
      thumbnail:   { url: THUMBNAIL_URL },
      image:       { url: FOOTER_GIF_URL },
      author: {
        name:     AUTHOR_NAME,
        url:      AUTHOR_URL,
        icon_url: AUTHOR_ICON_URL
      },
      footer: {
        text:      FOOTER_TEXT,
        icon_url:  FOOTER_ICON_URL
      },
      timestamp: timestamp
    }]
  };

  UrlFetchApp.fetch(WEBHOOK_URL, {
    method:      "post",
    contentType: "application/json",
    payload:     JSON.stringify(payload)
  });
}
